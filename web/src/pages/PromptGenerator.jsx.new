import React, { useState, useEffect, useCallback } from 'react';
import {
  Grid,
  Card,
  CardContent,
  Typography,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Button,
  Box,
  Paper,
  Chip,
  Alert,
  CircularProgress,
  IconButton,
  Tooltip,
  Tabs,
  Tab,
  AppBar,
  useTheme,
  Divider,
} from '@mui/material';
import {
  ContentCopy,
  Download,
  PlayArrow,
  Image as ImageIcon,
  TextFields,
} from '@mui/icons-material';
import { promptApi } from '../services/api';
import ImageGenerator from '../components/ImageGenerator';

const PromptGenerator = () => {
  const [styles, setStyles] = useState([]);
  const [formData, setFormData] = useState({
    style: '0', // Default to first style key from API
    subject: '',
    age: '',
    gender: '',
    clothing: '',
    setting: '',
  });
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState(0);
  const theme = useTheme();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Reset error when user makes changes
    if (error) {
      setError(null);
    }
  };

  // Get the current style name for display
  const getCurrentStyleName = () => {
    const style = styles.find(s => s.key === formData.style);
    return style ? style.name : 'Unknown Style';
  };

  useEffect(() => {
    const fetchStyles = async () => {
      try {
        const response = await promptApi.getStyles();
        setStyles(response.data.data || []);
      } catch (err) {
        setError('Failed to load styles');
      }
    };
    fetchStyles();
  }, []);

  const generatePrompt = useCallback(async (data) => {
    setLoading(true);
    setError(null);

    try {
      // Ensure we're sending the correct data format expected by the API
      const apiData = {
        style: data.style,
        subject: data.subject,
        ...(data.age && { age: data.age }),
        ...(data.gender && { gender: data.gender }),
        ...(data.clothing && { clothing: data.clothing }),
        ...(data.setting && { setting: data.setting }),
      };
      
      const response = await promptApi.generate(apiData);
      setResult(response.data);
      return response.data.text; // Return the generated prompt for image generation
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to generate prompt');
      console.error('Error generating prompt:', err);
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await generatePrompt(formData);
    } catch (err) {
      // Error is already handled in generatePrompt
    }
  };

  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom sx={{ fontWeight: 600, mb: 3 }}>
        ðŸŽ¯ AI Prompt & Image Generator
      </Typography>

      <Grid container spacing={3}>
        {/* Input Form */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Generate Configuration
              </Typography>

              <Box sx={{ width: '100%', mt: 2 }}>
                <AppBar position="static" color="default" elevation={1}>
                  <Tabs
                    value={activeTab}
                    onChange={handleTabChange}
                    indicatorColor="primary"
                    textColor="primary"
                    variant="fullWidth"
                    aria-label="generation type tabs"
                  >
                    <Tab label="Text Prompt" icon={<TextFields />} iconPosition="start" />
                    <Tab label="Generate Image" icon={<ImageIcon />} iconPosition="start" />
                  </Tabs>
                </AppBar>

                <Box sx={{ p: 3 }}>
                  {/* Common form for both tabs */}
                  <Box component="form" onSubmit={handleSubmit}>
                    <Grid container spacing={2}>
                      <Grid item xs={12}>
                        <FormControl fullWidth margin="normal">
                          <InputLabel id="style-label">Art Style</InputLabel>
                          <Select
                            labelId="style-label"
                            id="style"
                            name="style"
                            value={formData.style}
                            onChange={handleChange}
                            label="Art Style"
                            disabled={loading || styles.length === 0}
                          >
                            {styles.map((style) => (
                              <MenuItem key={style.key} value={style.key}>
                                {style.name}
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>
                      </Grid>

                      <Grid item xs={12}>
                        <TextField
                          fullWidth
                          label="Subject"
                          value={formData.subject}
                          onChange={handleChange}
                          name="subject"
                          placeholder="e.g., magical sorceress, space warrior, ancient wizard"
                          required
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <TextField
                          fullWidth
                          label="Age (optional)"
                          value={formData.age}
                          onChange={handleChange}
                          name="age"
                          placeholder="e.g., 22, teenager"
                        />
                      </Grid>

                      <Grid item xs={6}>
                        <TextField
                          fullWidth
                          label="Gender (optional)"
                          value={formData.gender}
                          onChange={handleChange}
                          name="gender"
                          placeholder="e.g., woman, man, person"
                        />
                      </Grid>

                      <Grid item xs={12}>
                        <TextField
                          fullWidth
                          label="Clothing (optional)"
                          value={formData.clothing}
                          onChange={handleChange}
                          name="clothing"
                          placeholder="e.g., flowing robes, armor, casual outfit"
                        />
                      </Grid>

                      <Grid item xs={12}>
                        <TextField
                          fullWidth
                          label="Setting (optional)"
                          value={formData.setting}
                          onChange={handleChange}
                          name="setting"
                          placeholder="e.g., magical forest, cyberpunk city, ancient temple"
                        />
                      </Grid>

                      <Grid item xs={12} sx={{ mt: 2 }}>
                        <Button
                          type="submit"
                          fullWidth
                          variant="contained"
                          color="primary"
                          disabled={loading}
                          startIcon={loading ? <CircularProgress size={24} /> : <PlayArrow />}
                          size="large"
                        >
                          {activeTab === 0 
                            ? (loading ? 'Generating...' : 'Generate Prompt')
                            : (loading ? 'Preparing...' : 'Generate Image')
                          }
                        </Button>
                      </Grid>
                    </Grid>

                    {error && (
                      <Alert severity="error" sx={{ mt: 2, mb: 2 }}>
                        {error}
                      </Alert>
                    )}
                    {styles.length === 0 && !loading && !error && (
                      <Alert severity="warning" sx={{ mt: 2, mb: 2 }}>
                        No styles available. Please check if the API server is running.
                      </Alert>
                    )}
                  </Box>

                  <Divider sx={{ my: 3 }} />

                  {/* Tab Content */}
                  {activeTab === 0 ? (
                    // Text Prompt Tab
                    <>
                      {result && (
                        <Card variant="outlined">
                          <CardContent>
                            <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                              <Typography variant="h6" component="h2">
                                Generated Prompt
                              </Typography>
                              <Box>
                                <Tooltip title="Copy to clipboard">
                                  <IconButton 
                                    onClick={() => copyToClipboard(result.text)}
                                    size="small"
                                  >
                                    <ContentCopy fontSize="small" />
                                  </IconButton>
                                </Tooltip>
                              </Box>
                            </Box>
                            
                            <Paper variant="outlined" sx={{ p: 2, bgcolor: 'background.default' }}>
                              <Typography component="pre" sx={{ whiteSpace: 'pre-wrap', fontFamily: 'monospace' }}>
                                {result.text}
                              </Typography>
                            </Paper>
                            
                            {result.negativePrompt && (
                              <Paper sx={{ p: 2, mt: 2, bgcolor: 'rgba(255,0,0,0.1)' }}>
                                <Typography variant="subtitle2" gutterBottom color="error">
                                  ðŸš« Negative Prompt:
                                </Typography>
                                <Typography variant="body2" sx={{ whiteSpace: 'pre-wrap', fontFamily: 'monospace' }}>
                                  {result.negativePrompt}
                                </Typography>
                              </Paper>
                            )}
                            
                            <Box mt={2} display="flex" gap={1} flexWrap="wrap">
                              <Chip 
                                label={`Style: ${result.style}`} 
                                color="primary" 
                                size="small" 
                              />
                              <Chip 
                                label={`Words: ${result.metadata?.wordCount || 0}`} 
                                color="secondary" 
                                size="small" 
                              />
                              <Chip 
                                label={`Chars: ${result.metadata?.characterCount || 0}`} 
                                color="info" 
                                size="small" 
                              />
                            </Box>
                          </CardContent>
                        </Card>
                      )}
                    </>
                  ) : (
                    // Image Generation Tab
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="h6" gutterBottom>
                        AI Image Generation
                      </Typography>
                      <Typography variant="body2" color="textSecondary" paragraph>
                        Generate an AI image based on your prompt. The image will be created using the current form values.
                      </Typography>
                      
                      {result?.text ? (
                        <>
                          <ImageGenerator 
                            prompt={result.text}
                            width={768}
                            height={512}
                            model="stable-diffusion-xl"
                          />
                          
                          <Box sx={{ mt: 3, p: 2, bgcolor: 'background.paper', borderRadius: 1, border: '1px solid', borderColor: 'divider' }}>
                            <Typography variant="subtitle2" color="textSecondary" gutterBottom>
                              Prompt used for this image:
                            </Typography>
                            <Typography variant="body2" component="pre" sx={{ 
                              whiteSpace: 'pre-wrap', 
                              fontFamily: 'monospace',
                              p: 1,
                              bgcolor: 'background.default',
                              borderRadius: 1,
                              fontSize: '0.8rem'
                            }}>
                              {result.text}
                            </Typography>
                          </Box>
                        </>
                      ) : (
                        <Paper sx={{ p: 4, textAlign: 'center', bgcolor: 'rgba(255,255,255,0.05)' }}>
                          <Typography variant="body1" color="text.secondary">
                            Generate a prompt first, then switch to the image tab to create an AI-generated image.
                          </Typography>
                        </Paper>
                      )}
                    </Box>
                  )}
                </Box>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};

export default PromptGenerator;
